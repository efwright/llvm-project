// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --include-generated-funcs --replace-value-regex "__omp_offloading_[0-9a-z]+_[0-9a-z]+" "reduction_size[.].+[.]" "pl_cond[.].+[.|,]" --prefix-filecheck-ir-name tests --version 4
// Test host codegen.
// RUN: %clang_cc1 -verify -Wno-vla -fopenmp -fopenmp-version=45 -x c++ -triple powerpc64le-unknown-unknown -fopenmp-targets=powerpc64le-ibm-linux-gnu -emit-llvm %s -o - | FileCheck %s --check-prefix CHECK --check-prefix CHECK-64 --check-prefix OMP45
// RUN: %clang_cc1 -fopenmp -fopenmp-version=45 -x c++ -std=c++11 -triple powerpc64le-unknown-unknown -fopenmp-targets=powerpc64le-ibm-linux-gnu -emit-pch -o %t %s
// RUN: %clang_cc1 -fopenmp -fopenmp-version=45 -x c++ -triple powerpc64le-unknown-unknown -fopenmp-targets=powerpc64le-ibm-linux-gnu -std=c++11 -include-pch %t -verify -Wno-vla %s -emit-llvm -o - | FileCheck %s --check-prefix CHECK --check-prefix CHECK-64 --check-prefix OMP45
// RUN: %clang_cc1 -verify -Wno-vla -fopenmp -fopenmp-version=45 -x c++ -triple i386-unknown-unknown -fopenmp-targets=i386-pc-linux-gnu -emit-llvm %s -o - | FileCheck %s --check-prefix CHECK --check-prefix CHECK-32 --check-prefix OMP45
// RUN: %clang_cc1 -fopenmp -fopenmp-version=45 -x c++ -std=c++11 -triple i386-unknown-unknown -fopenmp-targets=i386-pc-linux-gnu -emit-pch -o %t %s
// RUN: %clang_cc1 -fopenmp -fopenmp-version=45 -x c++ -triple i386-unknown-unknown -fopenmp-targets=i386-pc-linux-gnu -std=c++11 -include-pch %t -verify -Wno-vla %s -emit-llvm -o - | FileCheck %s --check-prefix CHECK --check-prefix CHECK-32 --check-prefix OMP45

// RUN: %clang_cc1 -verify -Wno-vla -fopenmp -x c++ -triple powerpc64le-unknown-unknown -fopenmp-targets=powerpc64le-ibm-linux-gnu -emit-llvm %s -o - | FileCheck %s --check-prefix CHECK --check-prefix CHECK-64 --check-prefix OMP50
// RUN: %clang_cc1 -fopenmp -x c++ -std=c++11 -triple powerpc64le-unknown-unknown -fopenmp-targets=powerpc64le-ibm-linux-gnu -emit-pch -o %t %s
// RUN: %clang_cc1 -fopenmp -x c++ -triple powerpc64le-unknown-unknown -fopenmp-targets=powerpc64le-ibm-linux-gnu -std=c++11 -include-pch %t -verify -Wno-vla %s -emit-llvm -o - | FileCheck %s --check-prefix CHECK --check-prefix CHECK-64 --check-prefix OMP50
// RUN: %clang_cc1 -verify -Wno-vla -fopenmp -x c++ -triple i386-unknown-unknown -fopenmp-targets=i386-pc-linux-gnu -emit-llvm %s -o - | FileCheck %s --check-prefix CHECK --check-prefix CHECK-32 --check-prefix OMP50
// RUN: %clang_cc1 -fopenmp -x c++ -std=c++11 -triple i386-unknown-unknown -fopenmp-targets=i386-pc-linux-gnu -emit-pch -o %t %s
// RUN: %clang_cc1 -fopenmp -x c++ -triple i386-unknown-unknown -fopenmp-targets=i386-pc-linux-gnu -std=c++11 -include-pch %t -verify -Wno-vla %s -emit-llvm -o - | FileCheck %s --check-prefix CHECK --check-prefix CHECK-32 --check-prefix OMP50

// RUN: %clang_cc1 -verify -Wno-vla -fopenmp -fopenmp-version=51 -D_DOMP51 -x c++ -triple powerpc64le-unknown-unknown -fopenmp-targets=powerpc64le-ibm-linux-gnu -emit-llvm %s -o - | FileCheck %s --check-prefix CHECK --check-prefix CHECK-64 --check-prefix OMP51
// RUN: %clang_cc1 -fopenmp -x c++ -fopenmp-version=51 -D_DOMP51 -std=c++11 -triple powerpc64le-unknown-unknown -fopenmp-targets=powerpc64le-ibm-linux-gnu -emit-pch -o %t %s
// RUN: %clang_cc1 -fopenmp -x c++ -fopenmp-version=51 -D_DOMP51 -triple powerpc64le-unknown-unknown -fopenmp-targets=powerpc64le-ibm-linux-gnu -std=c++11 -include-pch %t -verify -Wno-vla %s -emit-llvm -o - | FileCheck %s --check-prefix CHECK --check-prefix CHECK-64 --check-prefix OMP51
// RUN: %clang_cc1 -verify -Wno-vla -fopenmp -fopenmp-version=51 -D_DOMP51 -x c++ -triple i386-unknown-unknown -fopenmp-targets=i386-pc-linux-gnu -emit-llvm %s -o - | FileCheck %s --check-prefix CHECK --check-prefix CHECK-32 --check-prefix OMP51
// RUN: %clang_cc1 -fopenmp -fopenmp-version=51 -D_DOMP51 -x c++ -std=c++11 -triple i386-unknown-unknown -fopenmp-targets=i386-pc-linux-gnu -emit-pch -o %t %s
// RUN: %clang_cc1 -fopenmp -fopenmp-version=51 -D_DOMP51 -x c++ -triple i386-unknown-unknown -fopenmp-targets=i386-pc-linux-gnu -std=c++11 -include-pch %t -verify -Wno-vla %s -emit-llvm -o - | FileCheck %s --check-prefix CHECK --check-prefix CHECK-32 --check-prefix OMP51

// RUN: %clang_cc1 -verify -Wno-vla -fopenmp-simd -x c++ -triple powerpc64le-unknown-unknown -fopenmp-targets=powerpc64le-ibm-linux-gnu -emit-llvm %s -o - | FileCheck --check-prefix SIMD-ONLY0 %s
// RUN: %clang_cc1 -fopenmp-simd -x c++ -std=c++11 -triple powerpc64le-unknown-unknown -fopenmp-targets=powerpc64le-ibm-linux-gnu -emit-pch -o %t %s
// RUN: %clang_cc1 -fopenmp-simd -x c++ -triple powerpc64le-unknown-unknown -fopenmp-targets=powerpc64le-ibm-linux-gnu -std=c++11 -include-pch %t -verify -Wno-vla %s -emit-llvm -o - | FileCheck --check-prefix SIMD-ONLY0 %s
// RUN: %clang_cc1 -verify -Wno-vla -fopenmp-simd -x c++ -triple i386-unknown-unknown -fopenmp-targets=i386-pc-linux-gnu -emit-llvm %s -o - | FileCheck --check-prefix SIMD-ONLY0 %s
// RUN: %clang_cc1 -fopenmp-simd -x c++ -std=c++11 -triple i386-unknown-unknown -fopenmp-targets=i386-pc-linux-gnu -emit-pch -o %t %s
// RUN: %clang_cc1 -fopenmp-simd -x c++ -triple i386-unknown-unknown -fopenmp-targets=i386-pc-linux-gnu -std=c++11 -include-pch %t -verify -Wno-vla %s -emit-llvm -o - | FileCheck --check-prefix SIMD-ONLY0 %s

// Test target codegen - host bc file has to be created first.
// RUN: %clang_cc1 -verify -Wno-vla -fopenmp -fopenmp-version=45 -x c++ -triple powerpc64le-unknown-unknown -fopenmp-targets=powerpc64le-ibm-linux-gnu -emit-llvm-bc %s -o %t-ppc-host.bc
// RUN: %clang_cc1 -verify -Wno-vla -fopenmp -fopenmp-version=45 -x c++ -triple powerpc64le-unknown-unknown -fopenmp-targets=powerpc64le-ibm-linux-gnu -emit-llvm %s -fopenmp-is-target-device -fopenmp-host-ir-file-path %t-ppc-host.bc -o - | FileCheck %s --check-prefix TCHECK --check-prefix TCHECK-64
// RUN: %clang_cc1 -fopenmp -fopenmp-version=45 -x c++ -std=c++11 -triple powerpc64le-unknown-unknown -fopenmp-targets=powerpc64le-ibm-linux-gnu -emit-pch -fopenmp-is-target-device -fopenmp-host-ir-file-path %t-ppc-host.bc -o %t %s
// RUN: %clang_cc1 -fopenmp -fopenmp-version=45 -x c++ -triple powerpc64le-unknown-unknown -fopenmp-targets=powerpc64le-ibm-linux-gnu -std=c++11 -fopenmp-is-target-device -fopenmp-host-ir-file-path %t-ppc-host.bc -include-pch %t -verify -Wno-vla %s -emit-llvm -o - | FileCheck %s --check-prefix TCHECK --check-prefix TCHECK-64
// RUN: %clang_cc1 -verify -Wno-vla -fopenmp -fopenmp-version=45 -x c++ -triple i386-unknown-unknown -fopenmp-targets=i386-pc-linux-gnu -emit-llvm-bc %s -o %t-x86-host.bc
// RUN: %clang_cc1 -verify -Wno-vla -fopenmp -fopenmp-version=45 -x c++ -triple i386-unknown-unknown -fopenmp-targets=i386-pc-linux-gnu -emit-llvm %s -fopenmp-is-target-device -fopenmp-host-ir-file-path %t-x86-host.bc -o - | FileCheck %s --check-prefix TCHECK --check-prefix TCHECK-32
// RUN: %clang_cc1 -fopenmp -fopenmp-version=45 -x c++ -std=c++11 -triple i386-unknown-unknown -fopenmp-targets=i386-pc-linux-gnu -emit-pch -fopenmp-is-target-device -fopenmp-host-ir-file-path %t-x86-host.bc -o %t %s
// RUN: %clang_cc1 -fopenmp -fopenmp-version=45 -x c++ -triple i386-unknown-unknown -fopenmp-targets=i386-pc-linux-gnu -std=c++11 -fopenmp-is-target-device -fopenmp-host-ir-file-path %t-x86-host.bc -include-pch %t -verify -Wno-vla %s -emit-llvm -o - | FileCheck %s --check-prefix TCHECK --check-prefix TCHECK-32

// RUN: %clang_cc1 -verify -Wno-vla -fopenmp -x c++ -triple powerpc64le-unknown-unknown -fopenmp-targets=powerpc64le-ibm-linux-gnu -emit-llvm-bc %s -o %t-ppc-host.bc
// RUN: %clang_cc1 -verify -Wno-vla -fopenmp -x c++ -triple powerpc64le-unknown-unknown -fopenmp-targets=powerpc64le-ibm-linux-gnu -emit-llvm %s -fopenmp-is-target-device -fopenmp-host-ir-file-path %t-ppc-host.bc -o - | FileCheck %s --check-prefix TCHECK --check-prefix TCHECK-64
// RUN: %clang_cc1 -fopenmp -x c++ -std=c++11 -triple powerpc64le-unknown-unknown -fopenmp-targets=powerpc64le-ibm-linux-gnu -emit-pch -fopenmp-is-target-device -fopenmp-host-ir-file-path %t-ppc-host.bc -o %t %s
// RUN: %clang_cc1 -fopenmp -x c++ -triple powerpc64le-unknown-unknown -fopenmp-targets=powerpc64le-ibm-linux-gnu -std=c++11 -fopenmp-is-target-device -fopenmp-host-ir-file-path %t-ppc-host.bc -include-pch %t -verify -Wno-vla %s -emit-llvm -o - | FileCheck %s --check-prefix TCHECK --check-prefix TCHECK-64
// RUN: %clang_cc1 -verify -Wno-vla -fopenmp -x c++ -triple i386-unknown-unknown -fopenmp-targets=i386-pc-linux-gnu -emit-llvm-bc %s -o %t-x86-host.bc
// RUN: %clang_cc1 -verify -Wno-vla -fopenmp -x c++ -triple i386-unknown-unknown -fopenmp-targets=i386-pc-linux-gnu -emit-llvm %s -fopenmp-is-target-device -fopenmp-host-ir-file-path %t-x86-host.bc -o - | FileCheck %s --check-prefix TCHECK --check-prefix TCHECK-32
// RUN: %clang_cc1 -fopenmp -x c++ -std=c++11 -triple i386-unknown-unknown -fopenmp-targets=i386-pc-linux-gnu -emit-pch -fopenmp-is-target-device -fopenmp-host-ir-file-path %t-x86-host.bc -o %t %s
// RUN: %clang_cc1 -fopenmp -x c++ -triple i386-unknown-unknown -fopenmp-targets=i386-pc-linux-gnu -std=c++11 -fopenmp-is-target-device -fopenmp-host-ir-file-path %t-x86-host.bc -include-pch %t -verify -Wno-vla %s -emit-llvm -o - | FileCheck %s --check-prefix TCHECK --check-prefix TCHECK-32

// RUN: %clang_cc1 -verify -Wno-vla -fopenmp-simd -x c++ -triple powerpc64le-unknown-unknown -fopenmp-targets=powerpc64le-ibm-linux-gnu -emit-llvm-bc %s -o %t-ppc-host.bc
// RUN: %clang_cc1 -verify -Wno-vla -fopenmp-simd -x c++ -triple powerpc64le-unknown-unknown -fopenmp-targets=powerpc64le-ibm-linux-gnu -emit-llvm %s -fopenmp-is-target-device -fopenmp-host-ir-file-path %t-ppc-host.bc -o - | FileCheck --check-prefix SIMD-ONLY1 %s
// RUN: %clang_cc1 -fopenmp-simd -x c++ -std=c++11 -triple powerpc64le-unknown-unknown -fopenmp-targets=powerpc64le-ibm-linux-gnu -emit-pch -fopenmp-is-target-device -fopenmp-host-ir-file-path %t-ppc-host.bc -o %t %s
// RUN: %clang_cc1 -fopenmp-simd -x c++ -triple powerpc64le-unknown-unknown -fopenmp-targets=powerpc64le-ibm-linux-gnu -std=c++11 -fopenmp-is-target-device -fopenmp-host-ir-file-path %t-ppc-host.bc -include-pch %t -verify -Wno-vla %s -emit-llvm -o - | FileCheck --check-prefix SIMD-ONLY1 %s
// RUN: %clang_cc1 -verify -Wno-vla -fopenmp-simd -x c++ -triple i386-unknown-unknown -fopenmp-targets=i386-pc-linux-gnu -emit-llvm-bc %s -o %t-x86-host.bc
// RUN: %clang_cc1 -verify -Wno-vla -fopenmp-simd -x c++ -triple i386-unknown-unknown -fopenmp-targets=i386-pc-linux-gnu -emit-llvm %s -fopenmp-is-target-device -fopenmp-host-ir-file-path %t-x86-host.bc -o - | FileCheck --check-prefix SIMD-ONLY1 %s
// RUN: %clang_cc1 -fopenmp-simd -x c++ -std=c++11 -triple i386-unknown-unknown -fopenmp-targets=i386-pc-linux-gnu -emit-pch -fopenmp-is-target-device -fopenmp-host-ir-file-path %t-x86-host.bc -o %t %s
// RUN: %clang_cc1 -fopenmp-simd -x c++ -triple i386-unknown-unknown -fopenmp-targets=i386-pc-linux-gnu -std=c++11 -fopenmp-is-target-device -fopenmp-host-ir-file-path %t-x86-host.bc -include-pch %t -verify -Wno-vla %s -emit-llvm -o - | FileCheck --check-prefix SIMD-ONLY1 %s

// expected-no-diagnostics
#ifndef HEADER
#define HEADER

void foo()
{
  #pragma omp target parallel
  {
    #pragma omp simd

    for(int i = 0; i < 32; i++) {
      int a = i;
    }
  }
}

int main()
{
  foo();
  return 0;
}

#endif
// CHECK-LABEL: define internal void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3foov_l66(
// CHECK-SAME: ) #[[ATTR1:[0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr @[[GLOB1:[0-9]+]], i32 0, ptr @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3foov_l66.omp_outlined)
// CHECK-NEXT:    ret void
//
//
//
//
// CHECK-LABEL: define internal void @.omp_offloading.requires_reg(
// CHECK-SAME: ) #[[ATTR4:[0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    call void @__tgt_register_requires(i64 1)
// CHECK-NEXT:    ret void
//
//
// CHECK-64-LABEL: define dso_local void @_Z3foov(
// CHECK-64-SAME: ) #[[ATTR0:[0-9]+]] {
// CHECK-64-NEXT:  entry:
// CHECK-64-NEXT:    [[KERNEL_ARGS:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS:%.*]], align 8
// CHECK-64-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 0
// CHECK-64-NEXT:    store i32 2, ptr [[TMP0]], align 4
// CHECK-64-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 1
// CHECK-64-NEXT:    store i32 0, ptr [[TMP1]], align 4
// CHECK-64-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 2
// CHECK-64-NEXT:    store ptr null, ptr [[TMP2]], align 8
// CHECK-64-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 3
// CHECK-64-NEXT:    store ptr null, ptr [[TMP3]], align 8
// CHECK-64-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 4
// CHECK-64-NEXT:    store ptr null, ptr [[TMP4]], align 8
// CHECK-64-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 5
// CHECK-64-NEXT:    store ptr null, ptr [[TMP5]], align 8
// CHECK-64-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 6
// CHECK-64-NEXT:    store ptr null, ptr [[TMP6]], align 8
// CHECK-64-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 7
// CHECK-64-NEXT:    store ptr null, ptr [[TMP7]], align 8
// CHECK-64-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 8
// CHECK-64-NEXT:    store i64 0, ptr [[TMP8]], align 8
// CHECK-64-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 9
// CHECK-64-NEXT:    store i64 0, ptr [[TMP9]], align 8
// CHECK-64-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 10
// CHECK-64-NEXT:    store [3 x i32] [i32 1, i32 0, i32 0], ptr [[TMP10]], align 4
// CHECK-64-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 11
// CHECK-64-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP11]], align 4
// CHECK-64-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 12
// CHECK-64-NEXT:    store i32 0, ptr [[TMP12]], align 4
// CHECK-64-NEXT:    [[TMP13:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1:[0-9]+]], i64 -1, i32 1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3foov_l66.region_id, ptr [[KERNEL_ARGS]])
// CHECK-64-NEXT:    [[TMP14:%.*]] = icmp ne i32 [[TMP13]], 0
// CHECK-64-NEXT:    br i1 [[TMP14]], label [[OMP_OFFLOAD_FAILED:%.*]], label [[OMP_OFFLOAD_CONT:%.*]]
// CHECK-64:       omp_offload.failed:
// CHECK-64-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3foov_l66() #[[ATTR2:[0-9]+]]
// CHECK-64-NEXT:    br label [[OMP_OFFLOAD_CONT]]
// CHECK-64:       omp_offload.cont:
// CHECK-64-NEXT:    ret void
//
//
// CHECK-64-LABEL: define internal void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3foov_l66(
// CHECK-64-SAME: ) #[[ATTR1:[0-9]+]] {
// CHECK-64-NEXT:  entry:
// CHECK-64-NEXT:    call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr @[[GLOB1]], i32 0, ptr @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3foov_l66.omp_outlined)
// CHECK-64-NEXT:    ret void
//
//
// CHECK-64-LABEL: define internal void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3foov_l66.omp_outlined(
// CHECK-64-SAME: ptr noalias noundef [[DOTGLOBAL_TID_:%.*]], ptr noalias noundef [[DOTBOUND_TID_:%.*]]) #[[ATTR1]] {
// CHECK-64-NEXT:  entry:
// CHECK-64-NEXT:    [[DOTGLOBAL_TID__ADDR:%.*]] = alloca ptr, align 8
// CHECK-64-NEXT:    [[DOTBOUND_TID__ADDR:%.*]] = alloca ptr, align 8
// CHECK-64-NEXT:    [[TMP:%.*]] = alloca i32, align 4
// CHECK-64-NEXT:    [[DOTOMP_IV:%.*]] = alloca i32, align 4
// CHECK-64-NEXT:    [[I:%.*]] = alloca i32, align 4
// CHECK-64-NEXT:    [[A:%.*]] = alloca i32, align 4
// CHECK-64-NEXT:    store ptr [[DOTGLOBAL_TID_]], ptr [[DOTGLOBAL_TID__ADDR]], align 8
// CHECK-64-NEXT:    store ptr [[DOTBOUND_TID_]], ptr [[DOTBOUND_TID__ADDR]], align 8
// CHECK-64-NEXT:    store i32 0, ptr [[DOTOMP_IV]], align 4
// CHECK-64-NEXT:    br label [[OMP_INNER_FOR_COND:%.*]]
// CHECK-64:       omp.inner.for.cond:
// CHECK-64-NEXT:    [[TMP0:%.*]] = load i32, ptr [[DOTOMP_IV]], align 4, !llvm.access.group [[ACC_GRP4:![0-9]+]]
// CHECK-64-NEXT:    [[CMP:%.*]] = icmp slt i32 [[TMP0]], 32
// CHECK-64-NEXT:    br i1 [[CMP]], label [[OMP_INNER_FOR_BODY:%.*]], label [[OMP_INNER_FOR_END:%.*]]
// CHECK-64:       omp.inner.for.body:
// CHECK-64-NEXT:    [[TMP1:%.*]] = load i32, ptr [[DOTOMP_IV]], align 4, !llvm.access.group [[ACC_GRP4]]
// CHECK-64-NEXT:    [[MUL:%.*]] = mul nsw i32 [[TMP1]], 1
// CHECK-64-NEXT:    [[ADD:%.*]] = add nsw i32 0, [[MUL]]
// CHECK-64-NEXT:    store i32 [[ADD]], ptr [[I]], align 4, !llvm.access.group [[ACC_GRP4]]
// CHECK-64-NEXT:    [[TMP2:%.*]] = load i32, ptr [[I]], align 4, !llvm.access.group [[ACC_GRP4]]
// CHECK-64-NEXT:    store i32 [[TMP2]], ptr [[A]], align 4, !llvm.access.group [[ACC_GRP4]]
// CHECK-64-NEXT:    br label [[OMP_BODY_CONTINUE:%.*]]
// CHECK-64:       omp.body.continue:
// CHECK-64-NEXT:    br label [[OMP_INNER_FOR_INC:%.*]]
// CHECK-64:       omp.inner.for.inc:
// CHECK-64-NEXT:    [[TMP3:%.*]] = load i32, ptr [[DOTOMP_IV]], align 4, !llvm.access.group [[ACC_GRP4]]
// CHECK-64-NEXT:    [[ADD1:%.*]] = add nsw i32 [[TMP3]], 1
// CHECK-64-NEXT:    store i32 [[ADD1]], ptr [[DOTOMP_IV]], align 4, !llvm.access.group [[ACC_GRP4]]
// CHECK-64-NEXT:    br label [[OMP_INNER_FOR_COND]], !llvm.loop [[LOOP5:![0-9]+]]
// CHECK-64:       omp.inner.for.end:
// CHECK-64-NEXT:    store i32 32, ptr [[I]], align 4
// CHECK-64-NEXT:    ret void
//
//
// CHECK-64-LABEL: define dso_local noundef signext i32 @main(
// CHECK-64-SAME: ) #[[ATTR3:[0-9]+]] {
// CHECK-64-NEXT:  entry:
// CHECK-64-NEXT:    [[RETVAL:%.*]] = alloca i32, align 4
// CHECK-64-NEXT:    store i32 0, ptr [[RETVAL]], align 4
// CHECK-64-NEXT:    call void @_Z3foov()
// CHECK-64-NEXT:    ret i32 0
//
//
// CHECK-64-LABEL: define internal void @.omp_offloading.requires_reg(
// CHECK-64-SAME: ) #[[ATTR4:[0-9]+]] {
// CHECK-64-NEXT:  entry:
// CHECK-64-NEXT:    call void @__tgt_register_requires(i64 1)
// CHECK-64-NEXT:    ret void
//
//
//
// OMP45-LABEL: define internal void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3foov_l66(
// OMP45-SAME: ) #[[ATTR1:[0-9]+]] {
// OMP45-NEXT:  entry:
// OMP45-NEXT:    call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr @[[GLOB1:[0-9]+]], i32 0, ptr @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3foov_l66.omp_outlined)
// OMP45-NEXT:    ret void
//
//
//
//
// OMP45-LABEL: define internal void @.omp_offloading.requires_reg(
// OMP45-SAME: ) #[[ATTR4:[0-9]+]] {
// OMP45-NEXT:  entry:
// OMP45-NEXT:    call void @__tgt_register_requires(i64 1)
// OMP45-NEXT:    ret void
//
//
//
//
//
//
//
//
//
//
//
// CHECK-32-LABEL: define dso_local void @_Z3foov(
// CHECK-32-SAME: ) #[[ATTR0:[0-9]+]] {
// CHECK-32-NEXT:  entry:
// CHECK-32-NEXT:    [[KERNEL_ARGS:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS:%.*]], align 8
// CHECK-32-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 0
// CHECK-32-NEXT:    store i32 2, ptr [[TMP0]], align 4
// CHECK-32-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 1
// CHECK-32-NEXT:    store i32 0, ptr [[TMP1]], align 4
// CHECK-32-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 2
// CHECK-32-NEXT:    store ptr null, ptr [[TMP2]], align 4
// CHECK-32-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 3
// CHECK-32-NEXT:    store ptr null, ptr [[TMP3]], align 4
// CHECK-32-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 4
// CHECK-32-NEXT:    store ptr null, ptr [[TMP4]], align 4
// CHECK-32-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 5
// CHECK-32-NEXT:    store ptr null, ptr [[TMP5]], align 4
// CHECK-32-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 6
// CHECK-32-NEXT:    store ptr null, ptr [[TMP6]], align 4
// CHECK-32-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 7
// CHECK-32-NEXT:    store ptr null, ptr [[TMP7]], align 4
// CHECK-32-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 8
// CHECK-32-NEXT:    store i64 0, ptr [[TMP8]], align 8
// CHECK-32-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 9
// CHECK-32-NEXT:    store i64 0, ptr [[TMP9]], align 8
// CHECK-32-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 10
// CHECK-32-NEXT:    store [3 x i32] [i32 1, i32 0, i32 0], ptr [[TMP10]], align 4
// CHECK-32-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 11
// CHECK-32-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP11]], align 4
// CHECK-32-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 12
// CHECK-32-NEXT:    store i32 0, ptr [[TMP12]], align 4
// CHECK-32-NEXT:    [[TMP13:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1:[0-9]+]], i64 -1, i32 1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3foov_l66.region_id, ptr [[KERNEL_ARGS]])
// CHECK-32-NEXT:    [[TMP14:%.*]] = icmp ne i32 [[TMP13]], 0
// CHECK-32-NEXT:    br i1 [[TMP14]], label [[OMP_OFFLOAD_FAILED:%.*]], label [[OMP_OFFLOAD_CONT:%.*]]
// CHECK-32:       omp_offload.failed:
// CHECK-32-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3foov_l66() #[[ATTR2:[0-9]+]]
// CHECK-32-NEXT:    br label [[OMP_OFFLOAD_CONT]]
// CHECK-32:       omp_offload.cont:
// CHECK-32-NEXT:    ret void
//
//
// CHECK-32-LABEL: define internal void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3foov_l66(
// CHECK-32-SAME: ) #[[ATTR1:[0-9]+]] {
// CHECK-32-NEXT:  entry:
// CHECK-32-NEXT:    call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr @[[GLOB1]], i32 0, ptr @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3foov_l66.omp_outlined)
// CHECK-32-NEXT:    ret void
//
//
// CHECK-32-LABEL: define internal void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3foov_l66.omp_outlined(
// CHECK-32-SAME: ptr noalias noundef [[DOTGLOBAL_TID_:%.*]], ptr noalias noundef [[DOTBOUND_TID_:%.*]]) #[[ATTR1]] {
// CHECK-32-NEXT:  entry:
// CHECK-32-NEXT:    [[DOTGLOBAL_TID__ADDR:%.*]] = alloca ptr, align 4
// CHECK-32-NEXT:    [[DOTBOUND_TID__ADDR:%.*]] = alloca ptr, align 4
// CHECK-32-NEXT:    [[TMP:%.*]] = alloca i32, align 4
// CHECK-32-NEXT:    [[DOTOMP_IV:%.*]] = alloca i32, align 4
// CHECK-32-NEXT:    [[I:%.*]] = alloca i32, align 4
// CHECK-32-NEXT:    [[A:%.*]] = alloca i32, align 4
// CHECK-32-NEXT:    store ptr [[DOTGLOBAL_TID_]], ptr [[DOTGLOBAL_TID__ADDR]], align 4
// CHECK-32-NEXT:    store ptr [[DOTBOUND_TID_]], ptr [[DOTBOUND_TID__ADDR]], align 4
// CHECK-32-NEXT:    store i32 0, ptr [[DOTOMP_IV]], align 4
// CHECK-32-NEXT:    br label [[OMP_INNER_FOR_COND:%.*]]
// CHECK-32:       omp.inner.for.cond:
// CHECK-32-NEXT:    [[TMP0:%.*]] = load i32, ptr [[DOTOMP_IV]], align 4, !llvm.access.group [[ACC_GRP5:![0-9]+]]
// CHECK-32-NEXT:    [[CMP:%.*]] = icmp slt i32 [[TMP0]], 32
// CHECK-32-NEXT:    br i1 [[CMP]], label [[OMP_INNER_FOR_BODY:%.*]], label [[OMP_INNER_FOR_END:%.*]]
// CHECK-32:       omp.inner.for.body:
// CHECK-32-NEXT:    [[TMP1:%.*]] = load i32, ptr [[DOTOMP_IV]], align 4, !llvm.access.group [[ACC_GRP5]]
// CHECK-32-NEXT:    [[MUL:%.*]] = mul nsw i32 [[TMP1]], 1
// CHECK-32-NEXT:    [[ADD:%.*]] = add nsw i32 0, [[MUL]]
// CHECK-32-NEXT:    store i32 [[ADD]], ptr [[I]], align 4, !llvm.access.group [[ACC_GRP5]]
// CHECK-32-NEXT:    [[TMP2:%.*]] = load i32, ptr [[I]], align 4, !llvm.access.group [[ACC_GRP5]]
// CHECK-32-NEXT:    store i32 [[TMP2]], ptr [[A]], align 4, !llvm.access.group [[ACC_GRP5]]
// CHECK-32-NEXT:    br label [[OMP_BODY_CONTINUE:%.*]]
// CHECK-32:       omp.body.continue:
// CHECK-32-NEXT:    br label [[OMP_INNER_FOR_INC:%.*]]
// CHECK-32:       omp.inner.for.inc:
// CHECK-32-NEXT:    [[TMP3:%.*]] = load i32, ptr [[DOTOMP_IV]], align 4, !llvm.access.group [[ACC_GRP5]]
// CHECK-32-NEXT:    [[ADD1:%.*]] = add nsw i32 [[TMP3]], 1
// CHECK-32-NEXT:    store i32 [[ADD1]], ptr [[DOTOMP_IV]], align 4, !llvm.access.group [[ACC_GRP5]]
// CHECK-32-NEXT:    br label [[OMP_INNER_FOR_COND]], !llvm.loop [[LOOP6:![0-9]+]]
// CHECK-32:       omp.inner.for.end:
// CHECK-32-NEXT:    store i32 32, ptr [[I]], align 4
// CHECK-32-NEXT:    ret void
//
//
// CHECK-32-LABEL: define dso_local noundef i32 @main(
// CHECK-32-SAME: ) #[[ATTR3:[0-9]+]] {
// CHECK-32-NEXT:  entry:
// CHECK-32-NEXT:    [[RETVAL:%.*]] = alloca i32, align 4
// CHECK-32-NEXT:    store i32 0, ptr [[RETVAL]], align 4
// CHECK-32-NEXT:    call void @_Z3foov()
// CHECK-32-NEXT:    ret i32 0
//
//
// CHECK-32-LABEL: define internal void @.omp_offloading.requires_reg(
// CHECK-32-SAME: ) #[[ATTR4:[0-9]+]] {
// CHECK-32-NEXT:  entry:
// CHECK-32-NEXT:    call void @__tgt_register_requires(i64 1)
// CHECK-32-NEXT:    ret void
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
// OMP50-LABEL: define internal void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3foov_l66(
// OMP50-SAME: ) #[[ATTR1:[0-9]+]] {
// OMP50-NEXT:  entry:
// OMP50-NEXT:    call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr @[[GLOB1:[0-9]+]], i32 0, ptr @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3foov_l66.omp_outlined)
// OMP50-NEXT:    ret void
//
//
//
//
// OMP50-LABEL: define internal void @.omp_offloading.requires_reg(
// OMP50-SAME: ) #[[ATTR4:[0-9]+]] {
// OMP50-NEXT:  entry:
// OMP50-NEXT:    call void @__tgt_register_requires(i64 1)
// OMP50-NEXT:    ret void
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
// OMP51-LABEL: define internal void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3foov_l66(
// OMP51-SAME: ) #[[ATTR1:[0-9]+]] {
// OMP51-NEXT:  entry:
// OMP51-NEXT:    call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr @[[GLOB1:[0-9]+]], i32 0, ptr @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3foov_l66.omp_outlined)
// OMP51-NEXT:    ret void
//
//
//
//
// OMP51-LABEL: define internal void @.omp_offloading.requires_reg(
// OMP51-SAME: ) #[[ATTR4:[0-9]+]] {
// OMP51-NEXT:  entry:
// OMP51-NEXT:    call void @__tgt_register_requires(i64 1)
// OMP51-NEXT:    ret void
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
// TCHECK-64-LABEL: define weak_odr protected void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3foov_l66(
// TCHECK-64-SAME: ptr noalias noundef [[DYN_PTR:%.*]]) #[[ATTR0:[0-9]+]] {
// TCHECK-64-NEXT:  entry:
// TCHECK-64-NEXT:    [[DYN_PTR_ADDR:%.*]] = alloca ptr, align 8
// TCHECK-64-NEXT:    store ptr [[DYN_PTR]], ptr [[DYN_PTR_ADDR]], align 8
// TCHECK-64-NEXT:    call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr @[[GLOB1:[0-9]+]], i32 0, ptr @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3foov_l66.omp_outlined)
// TCHECK-64-NEXT:    ret void
//
//
// TCHECK-64-LABEL: define internal void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3foov_l66.omp_outlined(
// TCHECK-64-SAME: ptr noalias noundef [[DOTGLOBAL_TID_:%.*]], ptr noalias noundef [[DOTBOUND_TID_:%.*]]) #[[ATTR0]] {
// TCHECK-64-NEXT:  entry:
// TCHECK-64-NEXT:    [[STRUCTARG:%.*]] = alloca { ptr, ptr }, align 8
// TCHECK-64-NEXT:    [[DOTGLOBAL_TID__ADDR:%.*]] = alloca ptr, align 8
// TCHECK-64-NEXT:    [[DOTBOUND_TID__ADDR:%.*]] = alloca ptr, align 8
// TCHECK-64-NEXT:    [[I:%.*]] = alloca i32, align 4
// TCHECK-64-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON:%.*]], align 8
// TCHECK-64-NEXT:    [[DOTCOUNT_ADDR:%.*]] = alloca i32, align 4
// TCHECK-64-NEXT:    [[AGG_CAPTURED1:%.*]] = alloca [[STRUCT_ANON_0:%.*]], align 4
// TCHECK-64-NEXT:    store ptr [[DOTGLOBAL_TID_]], ptr [[DOTGLOBAL_TID__ADDR]], align 8
// TCHECK-64-NEXT:    store ptr [[DOTBOUND_TID_]], ptr [[DOTBOUND_TID__ADDR]], align 8
// TCHECK-64-NEXT:    br label [[OMP_LOOP_DISTANCE:%.*]]
// TCHECK-64:       omp.loop.distance:
// TCHECK-64-NEXT:    store i32 0, ptr [[I]], align 4
// TCHECK-64-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT_ANON]], ptr [[AGG_CAPTURED]], i32 0, i32 0
// TCHECK-64-NEXT:    store ptr [[I]], ptr [[TMP0]], align 8
// TCHECK-64-NEXT:    call void @__captured_stmt(ptr [[DOTCOUNT_ADDR]], ptr [[AGG_CAPTURED]])
// TCHECK-64-NEXT:    [[DOTCOUNT:%.*]] = load i32, ptr [[DOTCOUNT_ADDR]], align 4
// TCHECK-64-NEXT:    br label [[OMP_LOOP:%.*]]
// TCHECK-64:       omp_loop:
// TCHECK-64-NEXT:    [[GEP_AGG_CAPTURED1:%.*]] = getelementptr { ptr, ptr }, ptr [[STRUCTARG]], i32 0, i32 0
// TCHECK-64-NEXT:    store ptr [[AGG_CAPTURED1]], ptr [[GEP_AGG_CAPTURED1]], align 8
// TCHECK-64-NEXT:    [[GEP_I:%.*]] = getelementptr { ptr, ptr }, ptr [[STRUCTARG]], i32 0, i32 1
// TCHECK-64-NEXT:    store ptr [[I]], ptr [[GEP_I]], align 8
// TCHECK-64-NEXT:    call void @__kmpc_simd_4u(ptr @[[GLOB1]], ptr @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3foov_l66.omp_outlined..omp_par, i32 [[DOTCOUNT]], ptr [[STRUCTARG]], i32 2)
// TCHECK-64-NEXT:    br label [[OMP_LOOP_OUTLINED_EXIT:%.*]]
// TCHECK-64:       omp.loop.outlined.exit:
// TCHECK-64-NEXT:    br label [[OMP_LOOP_EXIT_SPLIT:%.*]]
// TCHECK-64:       omp.loop.exit.split:
// TCHECK-64-NEXT:    ret void
//
//
// TCHECK-64-LABEL: define internal void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3foov_l66.omp_outlined..omp_par(
// TCHECK-64-SAME: i32 [[OMP_IV:%.*]], ptr [[TMP0:%.*]]) #[[ATTR1:[0-9]+]] {
// TCHECK-64-NEXT:  omp.loop.entry:
// TCHECK-64-NEXT:    [[GEP_AGG_CAPTURED1:%.*]] = getelementptr { ptr, ptr }, ptr [[TMP0]], i32 0, i32 0
// TCHECK-64-NEXT:    [[LOADGEP_AGG_CAPTURED1:%.*]] = load ptr, ptr [[GEP_AGG_CAPTURED1]], align 8
// TCHECK-64-NEXT:    [[GEP_I:%.*]] = getelementptr { ptr, ptr }, ptr [[TMP0]], i32 0, i32 1
// TCHECK-64-NEXT:    [[LOADGEP_I:%.*]] = load ptr, ptr [[GEP_I]], align 8
// TCHECK-64-NEXT:    [[A:%.*]] = alloca i32, align 4
// TCHECK-64-NEXT:    [[I_LOOPVAR:%.*]] = alloca i32, align 4
// TCHECK-64-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT_ANON_0:%.*]], ptr [[LOADGEP_AGG_CAPTURED1]], i32 0, i32 0
// TCHECK-64-NEXT:    [[TMP2:%.*]] = load i32, ptr [[LOADGEP_I]], align 4
// TCHECK-64-NEXT:    store i32 [[TMP2]], ptr [[TMP1]], align 4
// TCHECK-64-NEXT:    br label [[OMP_LOOP_REGION:%.*]]
// TCHECK-64:       omp.loop.region:
// TCHECK-64-NEXT:    call void @__captured_stmt.1(ptr [[I_LOOPVAR]], i32 [[OMP_IV]], ptr [[LOADGEP_AGG_CAPTURED1]])
// TCHECK-64-NEXT:    [[TMP3:%.*]] = load i32, ptr [[I_LOOPVAR]], align 4
// TCHECK-64-NEXT:    store i32 [[TMP3]], ptr [[A]], align 4
// TCHECK-64-NEXT:    br label [[OMP_LOOP_REGION_SIMD_AFTER:%.*]]
// TCHECK-64:       omp.loop.region.simd.after:
// TCHECK-64-NEXT:    br label [[OMP_LOOP_PRE_FINALIZE:%.*]]
// TCHECK-64:       omp.loop.pre_finalize:
// TCHECK-64-NEXT:    br label [[OMP_LOOP_OUTLINED_EXIT_EXITSTUB:%.*]]
// TCHECK-64:       omp.loop.outlined.exit.exitStub:
// TCHECK-64-NEXT:    ret void
//
//
// TCHECK-64-LABEL: define internal void @__captured_stmt(
// TCHECK-64-SAME: ptr noundef nonnull align 4 dereferenceable(4) [[DISTANCE:%.*]], ptr noalias noundef [[__CONTEXT:%.*]]) #[[ATTR2:[0-9]+]] {
// TCHECK-64-NEXT:  entry:
// TCHECK-64-NEXT:    [[DISTANCE_ADDR:%.*]] = alloca ptr, align 8
// TCHECK-64-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// TCHECK-64-NEXT:    [[DOTSTART:%.*]] = alloca i32, align 4
// TCHECK-64-NEXT:    [[DOTSTOP:%.*]] = alloca i32, align 4
// TCHECK-64-NEXT:    [[DOTSTEP:%.*]] = alloca i32, align 4
// TCHECK-64-NEXT:    store ptr [[DISTANCE]], ptr [[DISTANCE_ADDR]], align 8
// TCHECK-64-NEXT:    store ptr [[__CONTEXT]], ptr [[__CONTEXT_ADDR]], align 8
// TCHECK-64-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8
// TCHECK-64-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT_ANON:%.*]], ptr [[TMP0]], i32 0, i32 0
// TCHECK-64-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[TMP1]], align 8
// TCHECK-64-NEXT:    [[TMP3:%.*]] = load i32, ptr [[TMP2]], align 4
// TCHECK-64-NEXT:    store i32 [[TMP3]], ptr [[DOTSTART]], align 4
// TCHECK-64-NEXT:    store i32 32, ptr [[DOTSTOP]], align 4
// TCHECK-64-NEXT:    store i32 1, ptr [[DOTSTEP]], align 4
// TCHECK-64-NEXT:    [[TMP4:%.*]] = load i32, ptr [[DOTSTART]], align 4
// TCHECK-64-NEXT:    [[TMP5:%.*]] = load i32, ptr [[DOTSTOP]], align 4
// TCHECK-64-NEXT:    [[CMP:%.*]] = icmp slt i32 [[TMP4]], [[TMP5]]
// TCHECK-64-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// TCHECK-64:       cond.true:
// TCHECK-64-NEXT:    [[TMP6:%.*]] = load i32, ptr [[DOTSTOP]], align 4
// TCHECK-64-NEXT:    [[TMP7:%.*]] = load i32, ptr [[DOTSTART]], align 4
// TCHECK-64-NEXT:    [[SUB:%.*]] = sub nsw i32 [[TMP6]], [[TMP7]]
// TCHECK-64-NEXT:    [[TMP8:%.*]] = load i32, ptr [[DOTSTEP]], align 4
// TCHECK-64-NEXT:    [[SUB1:%.*]] = sub i32 [[TMP8]], 1
// TCHECK-64-NEXT:    [[ADD:%.*]] = add i32 [[SUB]], [[SUB1]]
// TCHECK-64-NEXT:    [[TMP9:%.*]] = load i32, ptr [[DOTSTEP]], align 4
// TCHECK-64-NEXT:    [[DIV:%.*]] = udiv i32 [[ADD]], [[TMP9]]
// TCHECK-64-NEXT:    br label [[COND_END:%.*]]
// TCHECK-64:       cond.false:
// TCHECK-64-NEXT:    br label [[COND_END]]
// TCHECK-64:       cond.end:
// TCHECK-64-NEXT:    [[COND:%.*]] = phi i32 [ [[DIV]], [[COND_TRUE]] ], [ 0, [[COND_FALSE]] ]
// TCHECK-64-NEXT:    [[TMP10:%.*]] = load ptr, ptr [[DISTANCE_ADDR]], align 8
// TCHECK-64-NEXT:    store i32 [[COND]], ptr [[TMP10]], align 4
// TCHECK-64-NEXT:    ret void
//
//
// TCHECK-64-LABEL: define internal void @__captured_stmt.1(
// TCHECK-64-SAME: ptr noundef nonnull align 4 dereferenceable(4) [[LOOPVAR:%.*]], i32 noundef zeroext [[LOGICAL:%.*]], ptr noalias noundef [[__CONTEXT:%.*]]) #[[ATTR2]] {
// TCHECK-64-NEXT:  entry:
// TCHECK-64-NEXT:    [[LOOPVAR_ADDR:%.*]] = alloca ptr, align 8
// TCHECK-64-NEXT:    [[LOGICAL_ADDR:%.*]] = alloca i32, align 4
// TCHECK-64-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// TCHECK-64-NEXT:    store ptr [[LOOPVAR]], ptr [[LOOPVAR_ADDR]], align 8
// TCHECK-64-NEXT:    store i32 [[LOGICAL]], ptr [[LOGICAL_ADDR]], align 4
// TCHECK-64-NEXT:    store ptr [[__CONTEXT]], ptr [[__CONTEXT_ADDR]], align 8
// TCHECK-64-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8
// TCHECK-64-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT_ANON_0:%.*]], ptr [[TMP0]], i32 0, i32 0
// TCHECK-64-NEXT:    [[TMP2:%.*]] = load i32, ptr [[TMP1]], align 4
// TCHECK-64-NEXT:    [[TMP3:%.*]] = load i32, ptr [[LOGICAL_ADDR]], align 4
// TCHECK-64-NEXT:    [[MUL:%.*]] = mul i32 1, [[TMP3]]
// TCHECK-64-NEXT:    [[ADD:%.*]] = add i32 [[TMP2]], [[MUL]]
// TCHECK-64-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[LOOPVAR_ADDR]], align 8
// TCHECK-64-NEXT:    store i32 [[ADD]], ptr [[TMP4]], align 4
// TCHECK-64-NEXT:    ret void
//
//
//
//
//
//
//
//
//
//
//
//
// TCHECK-32-LABEL: define weak_odr protected void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3foov_l66(
// TCHECK-32-SAME: ptr noalias noundef [[DYN_PTR:%.*]]) #[[ATTR0:[0-9]+]] {
// TCHECK-32-NEXT:  entry:
// TCHECK-32-NEXT:    [[DYN_PTR_ADDR:%.*]] = alloca ptr, align 4
// TCHECK-32-NEXT:    store ptr [[DYN_PTR]], ptr [[DYN_PTR_ADDR]], align 4
// TCHECK-32-NEXT:    call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr @[[GLOB1:[0-9]+]], i32 0, ptr @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3foov_l66.omp_outlined)
// TCHECK-32-NEXT:    ret void
//
//
// TCHECK-32-LABEL: define internal void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3foov_l66.omp_outlined(
// TCHECK-32-SAME: ptr noalias noundef [[DOTGLOBAL_TID_:%.*]], ptr noalias noundef [[DOTBOUND_TID_:%.*]]) #[[ATTR0]] {
// TCHECK-32-NEXT:  entry:
// TCHECK-32-NEXT:    [[STRUCTARG:%.*]] = alloca { ptr, ptr }, align 8
// TCHECK-32-NEXT:    [[DOTGLOBAL_TID__ADDR:%.*]] = alloca ptr, align 4
// TCHECK-32-NEXT:    [[DOTBOUND_TID__ADDR:%.*]] = alloca ptr, align 4
// TCHECK-32-NEXT:    [[I:%.*]] = alloca i32, align 4
// TCHECK-32-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON:%.*]], align 4
// TCHECK-32-NEXT:    [[DOTCOUNT_ADDR:%.*]] = alloca i32, align 4
// TCHECK-32-NEXT:    [[AGG_CAPTURED1:%.*]] = alloca [[STRUCT_ANON_0:%.*]], align 4
// TCHECK-32-NEXT:    store ptr [[DOTGLOBAL_TID_]], ptr [[DOTGLOBAL_TID__ADDR]], align 4
// TCHECK-32-NEXT:    store ptr [[DOTBOUND_TID_]], ptr [[DOTBOUND_TID__ADDR]], align 4
// TCHECK-32-NEXT:    br label [[OMP_LOOP_DISTANCE:%.*]]
// TCHECK-32:       omp.loop.distance:
// TCHECK-32-NEXT:    store i32 0, ptr [[I]], align 4
// TCHECK-32-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT_ANON]], ptr [[AGG_CAPTURED]], i32 0, i32 0
// TCHECK-32-NEXT:    store ptr [[I]], ptr [[TMP0]], align 4
// TCHECK-32-NEXT:    call void @__captured_stmt(ptr [[DOTCOUNT_ADDR]], ptr [[AGG_CAPTURED]])
// TCHECK-32-NEXT:    [[DOTCOUNT:%.*]] = load i32, ptr [[DOTCOUNT_ADDR]], align 4
// TCHECK-32-NEXT:    br label [[OMP_LOOP:%.*]]
// TCHECK-32:       omp_loop:
// TCHECK-32-NEXT:    [[GEP_AGG_CAPTURED1:%.*]] = getelementptr { ptr, ptr }, ptr [[STRUCTARG]], i32 0, i32 0
// TCHECK-32-NEXT:    store ptr [[AGG_CAPTURED1]], ptr [[GEP_AGG_CAPTURED1]], align 4
// TCHECK-32-NEXT:    [[GEP_I:%.*]] = getelementptr { ptr, ptr }, ptr [[STRUCTARG]], i32 0, i32 1
// TCHECK-32-NEXT:    store ptr [[I]], ptr [[GEP_I]], align 4
// TCHECK-32-NEXT:    call void @__kmpc_simd_4u(ptr @[[GLOB1]], ptr @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3foov_l66.omp_outlined..omp_par, i32 [[DOTCOUNT]], ptr [[STRUCTARG]], i32 2)
// TCHECK-32-NEXT:    br label [[OMP_LOOP_OUTLINED_EXIT:%.*]]
// TCHECK-32:       omp.loop.outlined.exit:
// TCHECK-32-NEXT:    br label [[OMP_LOOP_EXIT_SPLIT:%.*]]
// TCHECK-32:       omp.loop.exit.split:
// TCHECK-32-NEXT:    ret void
//
//
// TCHECK-32-LABEL: define internal void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3foov_l66.omp_outlined..omp_par(
// TCHECK-32-SAME: i32 [[OMP_IV:%.*]], ptr [[TMP0:%.*]]) #[[ATTR1:[0-9]+]] {
// TCHECK-32-NEXT:  omp.loop.entry:
// TCHECK-32-NEXT:    [[GEP_AGG_CAPTURED1:%.*]] = getelementptr { ptr, ptr }, ptr [[TMP0]], i32 0, i32 0
// TCHECK-32-NEXT:    [[LOADGEP_AGG_CAPTURED1:%.*]] = load ptr, ptr [[GEP_AGG_CAPTURED1]], align 4
// TCHECK-32-NEXT:    [[GEP_I:%.*]] = getelementptr { ptr, ptr }, ptr [[TMP0]], i32 0, i32 1
// TCHECK-32-NEXT:    [[LOADGEP_I:%.*]] = load ptr, ptr [[GEP_I]], align 4
// TCHECK-32-NEXT:    [[A:%.*]] = alloca i32, align 4
// TCHECK-32-NEXT:    [[I_LOOPVAR:%.*]] = alloca i32, align 4
// TCHECK-32-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT_ANON_0:%.*]], ptr [[LOADGEP_AGG_CAPTURED1]], i32 0, i32 0
// TCHECK-32-NEXT:    [[TMP2:%.*]] = load i32, ptr [[LOADGEP_I]], align 4
// TCHECK-32-NEXT:    store i32 [[TMP2]], ptr [[TMP1]], align 4
// TCHECK-32-NEXT:    br label [[OMP_LOOP_REGION:%.*]]
// TCHECK-32:       omp.loop.region:
// TCHECK-32-NEXT:    call void @__captured_stmt.1(ptr [[I_LOOPVAR]], i32 [[OMP_IV]], ptr [[LOADGEP_AGG_CAPTURED1]])
// TCHECK-32-NEXT:    [[TMP3:%.*]] = load i32, ptr [[I_LOOPVAR]], align 4
// TCHECK-32-NEXT:    store i32 [[TMP3]], ptr [[A]], align 4
// TCHECK-32-NEXT:    br label [[OMP_LOOP_REGION_SIMD_AFTER:%.*]]
// TCHECK-32:       omp.loop.region.simd.after:
// TCHECK-32-NEXT:    br label [[OMP_LOOP_PRE_FINALIZE:%.*]]
// TCHECK-32:       omp.loop.pre_finalize:
// TCHECK-32-NEXT:    br label [[OMP_LOOP_OUTLINED_EXIT_EXITSTUB:%.*]]
// TCHECK-32:       omp.loop.outlined.exit.exitStub:
// TCHECK-32-NEXT:    ret void
//
//
// TCHECK-32-LABEL: define internal void @__captured_stmt(
// TCHECK-32-SAME: ptr noundef nonnull align 4 dereferenceable(4) [[DISTANCE:%.*]], ptr noalias noundef [[__CONTEXT:%.*]]) #[[ATTR2:[0-9]+]] {
// TCHECK-32-NEXT:  entry:
// TCHECK-32-NEXT:    [[DISTANCE_ADDR:%.*]] = alloca ptr, align 4
// TCHECK-32-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 4
// TCHECK-32-NEXT:    [[DOTSTART:%.*]] = alloca i32, align 4
// TCHECK-32-NEXT:    [[DOTSTOP:%.*]] = alloca i32, align 4
// TCHECK-32-NEXT:    [[DOTSTEP:%.*]] = alloca i32, align 4
// TCHECK-32-NEXT:    store ptr [[DISTANCE]], ptr [[DISTANCE_ADDR]], align 4
// TCHECK-32-NEXT:    store ptr [[__CONTEXT]], ptr [[__CONTEXT_ADDR]], align 4
// TCHECK-32-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 4
// TCHECK-32-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT_ANON:%.*]], ptr [[TMP0]], i32 0, i32 0
// TCHECK-32-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[TMP1]], align 4
// TCHECK-32-NEXT:    [[TMP3:%.*]] = load i32, ptr [[TMP2]], align 4
// TCHECK-32-NEXT:    store i32 [[TMP3]], ptr [[DOTSTART]], align 4
// TCHECK-32-NEXT:    store i32 32, ptr [[DOTSTOP]], align 4
// TCHECK-32-NEXT:    store i32 1, ptr [[DOTSTEP]], align 4
// TCHECK-32-NEXT:    [[TMP4:%.*]] = load i32, ptr [[DOTSTART]], align 4
// TCHECK-32-NEXT:    [[TMP5:%.*]] = load i32, ptr [[DOTSTOP]], align 4
// TCHECK-32-NEXT:    [[CMP:%.*]] = icmp slt i32 [[TMP4]], [[TMP5]]
// TCHECK-32-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// TCHECK-32:       cond.true:
// TCHECK-32-NEXT:    [[TMP6:%.*]] = load i32, ptr [[DOTSTOP]], align 4
// TCHECK-32-NEXT:    [[TMP7:%.*]] = load i32, ptr [[DOTSTART]], align 4
// TCHECK-32-NEXT:    [[SUB:%.*]] = sub nsw i32 [[TMP6]], [[TMP7]]
// TCHECK-32-NEXT:    [[TMP8:%.*]] = load i32, ptr [[DOTSTEP]], align 4
// TCHECK-32-NEXT:    [[SUB1:%.*]] = sub i32 [[TMP8]], 1
// TCHECK-32-NEXT:    [[ADD:%.*]] = add i32 [[SUB]], [[SUB1]]
// TCHECK-32-NEXT:    [[TMP9:%.*]] = load i32, ptr [[DOTSTEP]], align 4
// TCHECK-32-NEXT:    [[DIV:%.*]] = udiv i32 [[ADD]], [[TMP9]]
// TCHECK-32-NEXT:    br label [[COND_END:%.*]]
// TCHECK-32:       cond.false:
// TCHECK-32-NEXT:    br label [[COND_END]]
// TCHECK-32:       cond.end:
// TCHECK-32-NEXT:    [[COND:%.*]] = phi i32 [ [[DIV]], [[COND_TRUE]] ], [ 0, [[COND_FALSE]] ]
// TCHECK-32-NEXT:    [[TMP10:%.*]] = load ptr, ptr [[DISTANCE_ADDR]], align 4
// TCHECK-32-NEXT:    store i32 [[COND]], ptr [[TMP10]], align 4
// TCHECK-32-NEXT:    ret void
//
//
// TCHECK-32-LABEL: define internal void @__captured_stmt.1(
// TCHECK-32-SAME: ptr noundef nonnull align 4 dereferenceable(4) [[LOOPVAR:%.*]], i32 noundef [[LOGICAL:%.*]], ptr noalias noundef [[__CONTEXT:%.*]]) #[[ATTR2]] {
// TCHECK-32-NEXT:  entry:
// TCHECK-32-NEXT:    [[LOOPVAR_ADDR:%.*]] = alloca ptr, align 4
// TCHECK-32-NEXT:    [[LOGICAL_ADDR:%.*]] = alloca i32, align 4
// TCHECK-32-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 4
// TCHECK-32-NEXT:    store ptr [[LOOPVAR]], ptr [[LOOPVAR_ADDR]], align 4
// TCHECK-32-NEXT:    store i32 [[LOGICAL]], ptr [[LOGICAL_ADDR]], align 4
// TCHECK-32-NEXT:    store ptr [[__CONTEXT]], ptr [[__CONTEXT_ADDR]], align 4
// TCHECK-32-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 4
// TCHECK-32-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT_ANON_0:%.*]], ptr [[TMP0]], i32 0, i32 0
// TCHECK-32-NEXT:    [[TMP2:%.*]] = load i32, ptr [[TMP1]], align 4
// TCHECK-32-NEXT:    [[TMP3:%.*]] = load i32, ptr [[LOGICAL_ADDR]], align 4
// TCHECK-32-NEXT:    [[MUL:%.*]] = mul i32 1, [[TMP3]]
// TCHECK-32-NEXT:    [[ADD:%.*]] = add i32 [[TMP2]], [[MUL]]
// TCHECK-32-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[LOOPVAR_ADDR]], align 4
// TCHECK-32-NEXT:    store i32 [[ADD]], ptr [[TMP4]], align 4
// TCHECK-32-NEXT:    ret void
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//.
// OMP45: [[ACC_GRP4]] = !{!"{{.*}}clang version {{.*}}"}
// OMP45: [[LOOP5]] = distinct !{}
//.
// OMP50: [[ACC_GRP4]] = !{!"{{.*}}clang version {{.*}}"}
// OMP50: [[LOOP5]] = distinct !{}
//.
// OMP51: [[ACC_GRP4]] = !{!"{{.*}}clang version {{.*}}"}
// OMP51: [[LOOP5]] = distinct !{}
//.
//// NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
// SIMD-ONLY0: {{.*}}
// SIMD-ONLY1: {{.*}}
// TCHECK: {{.*}}
